[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "wheel"]

[project]
name = "plex_lastfm_now_playing"
version = "0.1.0"
description = "Scrobble now playing from Plex to Last.fm"
authors = [{name = "Sam Oehlert"}]
requires-python = ">=3.12"

dependencies = [
  "pydantic>=2.0",
  "pylast>=5.5.0",
  "fastapi>=0.115.12",
  "gunicorn>=23.0.0",
  "uvicorn>=0.34.2",
]

[project.optional-dependencies]
dev = [
  "ruff",
  "isort",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
target-version = "py312"

line-length = 120

[tool.ruff.lint]
select = [
  "E", # pycodestyle Errors
  "W", # pycodestyle Warnings
  "A", # flake8-builtins
  "ANN", # flake8-annotations
  "ARG", # flake8-unused-arguments
  "B", # flake8-Bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "COM", # flake8-commas
  "D", # pydocstyle
  "EM", # flake8-errmsg
  "ERA", # eradicate
  "EXE", # flake8-executable
  "F", # pyFlakes
  "FA", # flake8-future-annotations
  "FBT", # flake8-boolean-trap
  "FIX", # flake8-fixme
  "FLY", # flynt
  "FURB", # refurb
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "INP", # flake8-no-pep420
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-Naming
  "NPY", # NumPy-specific
  "PERF", # Perflint
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # Ruff-specific
  "S", # flake8-bandit (Security)
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "T10", # flake8-debugger  # "T20",  # flake8-print
  "TCH", # flake8-type-checking
  "TD", # flake8-todos
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "YTT", # flake8-2020
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # module imported but unused
"docs/*" = [
  "D100", # Missing docstring in public module
  "INP001", # File * is part of an implicit namespace package. Add an `__init__.py`.
]
"tests/*" = [
  "INP001",
  "ANN201", # Missing return type annotation for public function
  "S101", # Use of `assert` detected
  "PLR2004", # Magic value used in comparison, consider replacing * with a constant variable
]

[ruff.lint.pydocstyle]
convention = "google"


